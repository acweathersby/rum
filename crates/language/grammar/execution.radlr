IGNORE { c:sp c:nl tk:cmt::comment }

IMPORT primitives as prim
IMPORT comment as cmt

<> GPU_block > ":GPU" "{" "}"

<> root_blocks

  > "init" "{" init_block_statements(+)^stmts "}"

    :ast { t_InitExeBlock, name, stmts }
   
  | prim::id^name "{" block_statements(+)^stmts "}"

    :ast { t_NamedExeBlock, name, stmts }

<> block_statements 

  > "test"

<> select_expression 
  
  > "[" select_table_refs(+) "]" 


<> on_change > ":on-change"
<> on_unchanged > ":on-unchanged"
<> on_insert > ":on-insert"
<> on_update > ":on-update"
<> on_removed > ":on-removed"
<> on_fail > ":on-fail"
<> on_success > ":on-success"


<> init_block_statements > table_initialization


<> table_initialization 
  
  > ":init" ( "[" prim::int "]" :ast u32($2) )^rows table_id^table_name 

    :ast { t_TableZeroInit, table_name, rows }

  | "for" cur_id^cursor_name ":init" ( "[" prim::int "]" :ast u32($2) )?^rows table_id^table_name  "{" init_statements(+)^stmts "}"

    :ast { t_TableInit, table_name, cursor_name, rows, stmts }


<> init_statements 

  > assignment_statement


<> assignment_statement 

  > member^left "=" expression^right

   :ast { t_AssignStatement, left, right }


<> expression 
  
  > num

<> num 

  > prim::sci_num^num
    
    :ast { t_NumLiteral, num: f64($num) }


<> member 
  
  > prim::id(+".")^scopes

    :ast { t_Member, scopes }

<> table_id 
  
  > prim::id 
  
    :ast {t_TableId, id:$1, tok}

<> cur_id 
  
  > prim::id 
  
    :ast {t_CursorId, id:$1, tok}

<> var_id 
  
  > prim::id 
  
    :ast {t_VarId, id:$1, tok}