IGNORE { c:sp c:nl tk:cmt::comment }

IMPORT comment as cmt
IMPORT primitive as prim
IMPORT expression as expr

<> low_level_function 
  > tk:( id "\(" )  var_type_binding(+)^params ")" ( "->" type  )?^return_type  block

    :ast { t_LL_function, params, return_type, block  }


<> statements 
  
  > declaration 
  | loop 
  | match 
  | continue 
  | assignment 
  | block 


<> block 

  > "{" statements(+)^statements return?^ret "}"

    :ast { t_LL_Block, statements, ret  }


<> return 
  
  > "<-"  expression

    :ast { t_LL_Return, expression }
  

<> declaration 
  
  > var_type_binding ";"?

    :ast $1

  | id ":=" pointer_cast ";"?

    :ast { t_LL_PointerCastBinding, id, pointer_cast }


<> var_type_binding 
  
  > id ":" type^ty

    :ast { t_LL_Var_Binding, id, ty }


<> continue 
  
  > "continue" ";"?
    
    :ast { t_LL_Continue }


<> id 
  
  > prim::id^id

    :ast { t_Id, id, tok }


<> loop 
  
  > "loop {" statements(+)^statements "}"

    :ast { t_LL_Loop, statements  }


<> match 

  > "match" logical^expression "{" match_statement(+)^statements "}"

    :ast { t_LL_Match, expression, statements  }
  

<> match_statement 

  > match_case 

  | block


<> match_case 
  
  > primitive_value block

    :ast { t_LL_MatchCase, primitive_value, block  }


<> assignment 

  > (id | memory_location )^location "=" expression ";"?

    :ast { t_LL_Assign, location, expression  }

  | id "=" "heap(" (primitive_unsigned_integer | id)^byte_count ")" ";"? 

    :ast { t_LL_HeapAllocate, id, byte_count  }

  | id ":=" "stack(" (primitive_unsigned_integer | id)^byte_count ")" ";"? 

    :ast { t_LL_StackAllocate, id, byte_count  }

  | "free(" id ")" ";"?

    :ast { t_LL_Free, id  }


<> call > id "(" expression(+",") ")"

  :ast { t_LL_Call, id  }


<> member > id^root ("." id )(*)^branches

  :ast { t_LL_Member, root, branches }


<> self 

  > tk:( "self." ) id

    :ast { t_LL_SelfMember, id }


<> type 
  
  > primitive_type

  | primitive_ptr_type

  | table_type


<> primitive_value

  > primitive_number

  | prim::string^val

    :ast { t_LL_String, val:str($val)  }
  
  | prim::true

    :ast { t_LL_True }

  | prim::false

    :ast { t_LL_False }


<> primitive_number 

  > prim::sci_num

    :ast { t_LL_Number, val:f64($1) }


<> primitive_unsigned_integer 

  > prim::uint

    :ast { t_LL_UnsignedInteger, val:i64($1) }


<> primitive_integer 

  > prim::int

    :ast { t_LL_Integer, val:i64($1) }


<> table_type

  > "table" :ast { t_Type_Table }
  | "row"   :ast { t_Type_Row }


<> primitive_ptr_type

  > "*8"    :ast { t_Type_8BitPointer }
  | "*16"   :ast { t_Type_16BitPointer }
  | "*32"   :ast { t_Type_32BitPointer }
  | "*64"   :ast { t_Type_64BitPointer }
  | "*128"  :ast { t_Type_128BitPointer }


<> primitive_type

  > "u8"    :ast { t_Type_u8 }
  | "i8"    :ast { t_Type_i8 }
  | "u16"   :ast { t_Type_u16 }
  | "i16"   :ast { t_Type_i16 }
  | "u32"   :ast { t_Type_u32 }
  | "i32"   :ast { t_Type_i32 }
  | "u64"   :ast { t_Type_u64 }
  | "i64"   :ast { t_Type_i64 }
  | "f32"   :ast { t_Type_f32 }
  | "f64"   :ast { t_Type_f64 }
  | "f128"  :ast { t_Type_f128 }
  | "f32v2" :ast { t_Type_f32v2 }
  | "f32v3" :ast { t_Type_f32v3 }
  | "f32v4" :ast { t_Type_f32v4 }
  | "f32v8" :ast { t_Type_f32v8 }
  | "f64v2" :ast { t_Type_f64v2 }
  | "f64v4" :ast { t_Type_f64v4 }


<> expression 

  > arithmetic


<> logical 

  > logical^left "=="{1}  logical{1}^right
    
    :ast { t_EQ, left, right } 

  | logical^left "!="{0}  logical{0}^right
    
    :ast { t_NE, left, right } 

  | logical^left ">="{0}  logical{0}^right
    
    :ast { t_GE, left, right } 

  | logical^left "<="{0}  logical{0}^right
    
    :ast { t_LE, left, right } 

  | logical^left  ">"{0}  logical{0}^right
    
    :ast { t_GR, left, right } 

  | logical^left  "<"{0}  logical{0}^right
    
    :ast { t_LS, left, right } 

  | logical^left "||"{0}  logical{0}^right
    
    :ast { t_OR, left, right } 

  | logical^left "&&"{0}  logical{0}^right
    
    :ast { t_AND, left, right } 

  | arithmetic


<> bitwise 

  > bitwise^left  ">>"{0}  bitwise{0}^right
    
    :ast { t_BIT_SHIFT_RIGHT, left, right } 

  | bitwise^left  "<<"{0}  bitwise{0}^right
    
    :ast { t_BIT_SHIFT_LEFT, left, right } 

  | bitwise^left "&"{0}  bitwise{0}^right
    
    :ast { t_BIT_AND, left, right } 

  | bitwise^left "|"{0}  bitwise{0}^right
    
    :ast { t_BIT_OR, left, right } 

  | bitwise^left "~|"{0}  bitwise{0}^right
    
    :ast { t_BIT_EXC_OR, left, right } 

  | arithmetic


<> arithmetic 
  
  > arithmetic^right   "+"{1}  arithmetic{1}^left
    
    :ast { t_Add, left, right, tok }

  | arithmetic^right   "-"{1}  arithmetic{1}^left
    
    :ast { t_Sub, left, right, tok }

  | arithmetic^right   "*"{2}  arithmetic{2}^left
    
    :ast { t_Mul, left, right, tok }

  | arithmetic^right   "/"{2}  arithmetic{2}^left
    
    :ast { t_Div, left, right, tok }

  | arithmetic^right   "%"{2}  arithmetic{2}^left
    
    :ast { t_Mod, left, right, tok }

  | arithmetic^right  "**"{3}  arithmetic{3}^left
    
    :ast { t_Pow, left, right, tok }

  | arithmetic^right  "//"{3}  arithmetic{3}^left
    
    :ast { t_Root, left, right, tok }

  | arithmetic^right "log"{3}  arithmetic{3}^left
    
    :ast { t_Log, left, right, tok }

  | Term

  | "(" arithmetic ")" 
    
    :ast $2


<> Term 

  > call | member | primitive_value | memory_location | self | primitive_cast


<> memory_location 

  > "[" pointer_offset "]"

    :ast $2


<> pointer_offset 

  > (pointer_cast | id)^base_ptr ( "+" mem_expr )?^expression

    :ast { t_LL_MemLocation, base_ptr, expression, tok }


<> mem_expr 

  > mem_expr^left "+"{1} mem_expr{1}^right

    :ast { t_LL_MemAdd, left, right }

  | mem_expr^left "*"{2} mem_expr{2}^right

    :ast { t_LL_MemMul, left, right }

  | id

  | primitive_integer


<> primitive_cast 

  > primitive_type^ty "(" expression ")"

    :ast { t_LL_PrimitiveCast, ty, expression, tok }


<> pointer_cast 

  > primitive_ptr_type^ty "(" id ")"

    :ast { t_LL_PointerCast, ty, id, tok }