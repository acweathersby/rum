IGNORE { c:sp c:nl tk:cmt::comment }

IMPORT routine as rt
IMPORT statement as stmt
IMPORT expression as expr
IMPORT type as ty
IMPORT annotation as anno
IMPORT ../common/primitive as prim
IMPORT ../common/comment as cmt


<> module 

  > module_members $

    :ast { t_RawModule, members: $1 }

<> module_members 

  > ( annotated_module_member | anno::lifetime_variable | anno::annotation_declaration )(+)^members

    :ast { t_RawModMembers, members }

<> annotated_module_member 

  > anno::annotation? module_member^member

    :ast { t_AnnotatedModMember, annotation, member }

<> module_member 

  > binding
  | binding_union
  | alias
  | alias_union
  | module_scope

<> binding 

  > prim::var^name "=>" ty::complex_type^ty

    :ast { t_RawBoundType, name, ty, tok }

  | prim::var^name "=>" rt::routine_definition^ty

    :ast { t_RawBoundType, name, ty, tok }

<> binding_union 

  > prim::var^name "=>" prim::var(+"|")^names

    :ast { t_RawBoundUnion, name, names, ty, tok }

<> alias

  > prim::var^name "<:" ty::type^ty "=" expr::expression^expr

   :ast { t_RawAlias, name, ty, expr, tok }


<> alias_union

  > prim::var^name "<:" ty::type^ty prim::var(+"|")^names

     :ast { t_RawBoundUnion, name, ty, names, tok }

<> module_scope 

  > prim::var^name "{" module_members^members "}"

    :ast { t_RawModuleScope, name: $1, members: $3   }


