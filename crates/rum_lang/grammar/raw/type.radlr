IGNORE { c:sp c:nl tk:cmt::comment }

IMPORT ../common/primitive as prim
IMPORT ./expression as expr
IMPORT annotation as anno
IMPORT ../common/comment as cmt

IGNORE { c:sp c:nl }

<> type 
  > non_array_type 
  | array_type

<> non_array_type > base_type 
  | pointer_type
  | structure_type
  | type_type
  | var_type

<> pointer_type > "*" base_type^base_ty :ast { t_Type_Pointer, base_ty, tok }

<> base_type 

  > primitive_type

  | named_type


<> complex_type > array_type | structure_type

<> named_type > prim::var^name :ast { t_Type_Variable, name }

<> type_type > "ty" :ast { t_Type_Type }

<> var_type > tk:( "^" prim::var^name )^name  :ast { t_Var_Type, name: str($name<1,0>) }

<> primitive_type
  > primitive_uint
  | primitive_int
  | "f32"   :ast { t_Type_f32 }
  | "f64"   :ast { t_Type_f64 }
  | "f128"  :ast { t_Type_f128 }
  | "f32v2" :ast { t_Type_f32v2 }
  | "f32v3" :ast { t_Type_f32v3 }
  | "f32v4" :ast { t_Type_f32v4 }
  | "f32v8" :ast { t_Type_f32v8 }
  | "f64v2" :ast { t_Type_f64v2 }
  | "f64v4" :ast { t_Type_f64v4 }

<> primitive_int 
  > "i8"    :ast { t_Type_i8 }
  | "i16"   :ast { t_Type_i16 }
  | "i32"   :ast { t_Type_i32 }
  | "i64"   :ast { t_Type_i64 }

<> primitive_uint 
  > "u8"    :ast { t_Type_u8 }
  | "u16"   :ast { t_Type_u16 }
  | "u32"   :ast { t_Type_u32 }
  | "u64"   :ast { t_Type_u64 }

<> array_type 
  
  > anno::lifetime?^heap "[" non_array_type^base_type ( ";"  ( prim::uint :ast u32($1) )(+) )?^dimensions   "]"

    :ast { t_Type_Array, base_type, heap, dimensions, tok }


<> structure_type

  > anno::lifetime?^heap "[" property(+",")^properties ","(*) "]"

    :ast { t_Type_Struct, properties, heap, tok }

<> property 

  > prim::var^name ":" type^ty

      :ast  { t_Property, name, ty, tok  }

<> enum_type 

  > prim::var(+"|")^names

    :ast { t_Type_Enum, names, tok }


