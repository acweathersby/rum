
#intrinsic
aligned :: (offset: u32, alignment: u32) : u32

  (offset + ( alignment + 1 )) & (4294967295 - (alignment - 1))

#intrinsic
max :: (a:u32, b:u32) : u32 

  if a > b { a } otherwise { b }

#intrinsic
min :: (a:u32, b:u32) : u32 

  if a < b { a } otherwise { b }

#intrinsic
get_byte_size :: (a: type) : u32 

  a.ele_byte_size


// END META =============================================

DD :: [ test: f32, rainbow: u32 ]

#test
trivial :: (u:u32) : DD {

  o:u32 = aligned(u, 64) + u

  d = [ test = 200.0, rainbow =  min(max(o, 0), 3999) ]

  r = 33022

  //d.rainbow = 392 + d.test
  //d.test = 988 + r

  d
}


